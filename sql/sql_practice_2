use assignment_1;

create table Station
(
	id int,
	city varchar(21),
	state varchar(2),
	Lat_N int,
    LONG_W INT

);
describe station;

INSERT INTO STATION VALUES(794,'Kissee Mills','MO',139,73);
INSERT INTO STATION VALUES(824,'Loma Mar','CA',48,130);
INSERT INTO STATION VALUES(603,'Sandy Hook','CT',72,148);
INSERT INTO STATION VALUES(478,'Tipton','IN',33,97);
INSERT INTO STATION VALUES(619,'Arlington','CO',75,92);
INSERT INTO STATION VALUES(711,'Turner','AR',50,101);
INSERT INTO STATION VALUES(839,'Slidell','LA',85,151);
INSERT INTO STATION VALUES(411,'Negreet','LA',98,105);
INSERT INTO STATION VALUES(588,'Glencoe','KY',46,136);
INSERT INTO STATION VALUES(665,'Chelsea','IA',98,59);
INSERT INTO STATION VALUES(342,'Chignik Lagoon','AK',103,153);
INSERT INTO STATION VALUES(733,'Pelahatchie','MS',38,28);
INSERT INTO STATION VALUES(811,'Dorrance','KS',102,121);
INSERT INTO STATION VALUES(698,'Albany','CA',49,80);
INSERT INTO STATION VALUES(325,'Monument','KS',70,141);
INSERT INTO STATION VALUES(414,'Manchester','MD',73,37);
INSERT INTO STATION VALUES(113,'Prescott','IA',39,65);
INSERT INTO STATION VALUES(971,'Graettinger','IA',94,150);
INSERT INTO STATION VALUES(266,'Cahone','CO',116,127);

select * from station;

Q7. Query a list of CITY and STATE from the STATION table.
- select city,state from station;

Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
 in any order, but exclude duplicates from the answer.
	select distinct(city) from station where id %2=0 order by city asc;

Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.
	select  count(city) as total_number_of_city, count(distinct(city)) as total_Number_of_distinct_city,
 (count(city)- count(distinct(city))) as difference_city_count from station;

Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
For example, CITY has four entries: DEF, ABC, PQRS and WXY.
 Sample Output   ABC 3 PQRS 4
 Hint - When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths and. The longest name is PQRS, but there are options for shortest named city. Choose ABC, because it comes first alphabetically. Note You can write two separate queries to get the desired output. It need not be a single query.
- 
select city,length(city) as min_length_of_city from station order by length(city) asc limit 1; 
 select city,length(city)as max_length_of_city from station order by length(city) desc limit 1;

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.

1] select distinct city from station where
lcase(city) Like 'a%' or
lcase(city) Like 'e%' or
lcase(city) Like 'i%' or
lcase(city) Like 'o%' or
lcase(city) Like 'u%' order by city;

2] SELECT DISTINCT(CITY) AS DISTINCT_CITY_NAME FROM STATION WHERE
lower(SUBSTR(city,1,1)) in ('o','e','i','a','u');

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicate
 
1] select distinct(city) from station where lower(substr(city,-1,1)) in ('a','e','i','o','u') order by city;
2] select distinct city from station where 
lcase(city) Like '%a' or
lcase(city) Like '%e' or
lcase(city) Like '%i' or
lcase(city) Like '%o' or
lcase(city) Like '%u' 
order by city;

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
  
select distinct city from station where
lcase(city) not like 'a%' OR
lcase(city) not like 'e%' OR
lcase(city) not like 'i%' OR
lcase(city) not like 'o%' OR
lcase(city) not like 'u%'
order by city;;
Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct city from station where
lcase(city) not like '%a' OR
lcase(city) not like '%e' OR
lcase(city) not like '%i' OR
lcase(city) not like '%o' OR
lcase(city) not like '%u'
order by city;

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.
	select distinct city from station where city not regexp '^[aeiou]' or city not regexp '[aeiou]$';

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
	select distinct city from station where city 
